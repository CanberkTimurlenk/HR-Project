// <auto-generated />
using System;
using HR.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HR.Data.Migrations
{
    [DbContext(typeof(HrDbContext))]
    partial class HrDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HR.Data.Entities.Abstract.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("Date");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTimeOffset>("LastLogin")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Middlename")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PhotoFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResetPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUser");

                    b.HasDiscriminator<string>("UserType").HasValue("ApplicationUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("HR.Data.Entities.Concrete.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressTypes")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nchar(5)")
                        .IsFixedLength();

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Addresses", (string)null);

                    b.HasDiscriminator<int>("AddressTypes");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("HR.Data.Entities.Concrete.Advance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdvanceTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<int>("CreatorEmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyType")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReviewerManagerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdvanceTypeId");

                    b.HasIndex("CreatorEmployeeId");

                    b.HasIndex("ReviewerManagerId");

                    b.ToTable("Advances");
                });

            modelBuilder.Entity("HR.Data.Entities.Concrete.AdvanceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("AdvanceTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Salary",
                            IsActive = true,
                            TypeName = "Salary"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Business",
                            IsActive = true,
                            TypeName = "Business"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Other",
                            IsActive = true,
                            TypeName = "Other"
                        });
                });

            modelBuilder.Entity("HR.Data.Entities.Concrete.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ContractEndDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("ContractStartDate")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeCount")
                        .HasColumnType("int");

                    b.Property<int>("EstablishmentYear")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LogoFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MersisNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nchar(16)")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("TaxOffice")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyTypeId");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 3,
                            CompanyTypeId = 1,
                            ContractEndDate = new DateTime(2024, 10, 18, 15, 44, 16, 233, DateTimeKind.Local).AddTicks(7794),
                            ContractStartDate = new DateTime(2024, 3, 19, 15, 44, 16, 233, DateTimeKind.Local).AddTicks(7767),
                            Email = "sample@example.com",
                            EmployeeCount = 100,
                            EstablishmentYear = 2000,
                            IsActive = false,
                            LogoFile = "company_logo.png",
                            MersisNumber = "1234567890",
                            Name = "Sample Company",
                            PhoneNumber = "123-456-7890",
                            TaxNumber = "0987654321",
                            TaxOffice = "Sample Tax Office"
                        });
                });

            modelBuilder.Entity("HR.Data.Entities.Concrete.CompanyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("CompanyTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            IsActive = true,
                            TypeName = "Limited Company"
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            IsActive = true,
                            TypeName = "Public Company"
                        },
                        new
                        {
                            Id = 3,
                            Description = "",
                            IsActive = true,
                            TypeName = "Private Company"
                        },
                        new
                        {
                            Id = 4,
                            Description = "",
                            IsActive = true,
                            TypeName = "Holding Company"
                        },
                        new
                        {
                            Id = 5,
                            Description = "",
                            IsActive = true,
                            TypeName = "Joint Venture"
                        });
                });

            modelBuilder.Entity("HR.Data.Entities.Concrete.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<int>("CreatorEmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyType")
                        .HasColumnType("int");

                    b.Property<int>("ExpenseId")
                        .HasColumnType("int");

                    b.Property<int>("ExpenseTypeId")
                        .HasColumnType("int");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("RequestDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReviewerManagerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorEmployeeId");

                    b.HasIndex("ExpenseTypeId");

                    b.HasIndex("ReviewerManagerId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("HR.Data.Entities.Concrete.ExpenseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ExpenseTypes");
                });

            modelBuilder.Entity("HR.Data.Entities.Concrete.Leave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<int>("CreatorEmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("LeaveTypeId")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfDays")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReviewerManagerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatorEmployeeId");

                    b.HasIndex("LeaveTypeId");

                    b.HasIndex("ReviewerManagerId");

                    b.ToTable("Leaves");
                });

            modelBuilder.Entity("HR.Data.Entities.Concrete.LeaveType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("LeaveTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "annual",
                            IsActive = true,
                            TypeName = "Annual Leave"
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            IsActive = true,
                            TypeName = "Maternity Leave"
                        },
                        new
                        {
                            Id = 3,
                            Description = "",
                            IsActive = true,
                            TypeName = "Paternity Leave"
                        },
                        new
                        {
                            Id = 4,
                            Description = "",
                            IsActive = true,
                            TypeName = "Marriage Leave"
                        },
                        new
                        {
                            Id = 5,
                            Description = "",
                            IsActive = true,
                            TypeName = "Bereavement Leave"
                        });
                });

            modelBuilder.Entity("HR.Data.Entities.Abstract.ServiceUser", b =>
                {
                    b.HasBaseType("HR.Data.Entities.Abstract.ApplicationUser");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TurkishIdentificationNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nchar(11)")
                        .IsFixedLength();

                    b.HasIndex("CompanyId");

                    b.HasDiscriminator().HasValue("ServiceUser");
                });

            modelBuilder.Entity("HR.Data.Entities.Concrete.Admin", b =>
                {
                    b.HasBaseType("HR.Data.Entities.Abstract.ApplicationUser");

                    b.HasDiscriminator().HasValue("Admin");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 4, 18, 15, 44, 16, 236, DateTimeKind.Unspecified).AddTicks(1317), new TimeSpan(0, 3, 0, 0, 0)),
                            DateOfBirth = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "yonetici@bilgeadam.com",
                            Firstname = "Site",
                            IsActive = true,
                            LastLogin = new DateTimeOffset(new DateTime(2024, 4, 18, 15, 44, 16, 236, DateTimeKind.Unspecified).AddTicks(1289), new TimeSpan(0, 3, 0, 0, 0)),
                            Lastname = "Yoneticisi",
                            Middlename = "-",
                            Password = "ba394499b56b89fe5bda1338fcca6a04",
                            PhotoFile = "https://images.unsplash.com/photo-1530785602389-07594beb8b73?q=80&w=1587&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"
                        });
                });

            modelBuilder.Entity("HR.Data.Entities.Concrete.CompanyAddress", b =>
                {
                    b.HasBaseType("HR.Data.Entities.Concrete.Address");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.HasIndex("CompanyId")
                        .IsUnique()
                        .HasFilter("[CompanyId] IS NOT NULL");

                    b.HasDiscriminator().HasValue(2);

                    b.HasData(
                        new
                        {
                            Id = 3,
                            City = "Third City",
                            Country = "Third Country",
                            IsActive = false,
                            PostalCode = "67890",
                            State = "Third State",
                            Street = "789 Pine Lane",
                            CompanyId = 1
                        });
                });

            modelBuilder.Entity("HR.Data.Entities.Concrete.ServiceUserAddress", b =>
                {
                    b.HasBaseType("HR.Data.Entities.Concrete.Address");

                    b.Property<int>("ServiceUserId")
                        .HasColumnType("int");

                    b.HasIndex("ServiceUserId");

                    b.HasDiscriminator().HasValue(1);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Sample City",
                            Country = "Sample Country",
                            IsActive = false,
                            PostalCode = "12345",
                            State = "Sample State",
                            Street = "123 Main Street",
                            ServiceUserId = 1
                        },
                        new
                        {
                            Id = 2,
                            City = "Another City",
                            Country = "Another Country",
                            IsActive = false,
                            PostalCode = "54321",
                            State = "Another State",
                            Street = "456 Oak Avenue",
                            ServiceUserId = 2
                        });
                });

            modelBuilder.Entity("HR.Data.Entities.Concrete.Employee", b =>
                {
                    b.HasBaseType("HR.Data.Entities.Abstract.ServiceUser");

                    b.Property<DateTime?>("DateOfDismissal")
                        .HasColumnType("Date");

                    b.Property<DateTime>("DateOfEmployment")
                        .HasColumnType("Date");

                    b.Property<decimal>("Salary")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasDiscriminator().HasValue("Employee");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 4, 18, 15, 44, 16, 236, DateTimeKind.Unspecified).AddTicks(4333), new TimeSpan(0, 3, 0, 0, 0)),
                            DateOfBirth = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "employee@mail.com",
                            Firstname = "Jane",
                            IsActive = true,
                            LastLogin = new DateTimeOffset(new DateTime(2024, 4, 18, 15, 44, 16, 236, DateTimeKind.Unspecified).AddTicks(4323), new TimeSpan(0, 3, 0, 0, 0)),
                            Lastname = "Doe",
                            Middlename = "-",
                            Password = "ba394499b56b89fe5bda1338fcca6a04",
                            PhotoFile = "https://images.unsplash.com/photo-1530785602389-07594beb8b73?q=80&w=1587&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            CompanyId = 1,
                            Department = "IT",
                            PhoneNumber = "1234567890",
                            TurkishIdentificationNumber = "12345678902",
                            DateOfEmployment = new DateTime(2010, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Salary = 10000m
                        });
                });

            modelBuilder.Entity("HR.Data.Entities.Concrete.Manager", b =>
                {
                    b.HasBaseType("HR.Data.Entities.Abstract.ServiceUser");

                    b.HasDiscriminator().HasValue("Manager");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTimeOffset(new DateTime(2024, 4, 18, 15, 44, 16, 236, DateTimeKind.Unspecified).AddTicks(6671), new TimeSpan(0, 3, 0, 0, 0)),
                            DateOfBirth = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "manager@mail.com",
                            Firstname = "John",
                            IsActive = true,
                            LastLogin = new DateTimeOffset(new DateTime(2024, 4, 18, 15, 44, 16, 236, DateTimeKind.Unspecified).AddTicks(6662), new TimeSpan(0, 3, 0, 0, 0)),
                            Lastname = "Doe",
                            Middlename = "-",
                            Password = "ba394499b56b89fe5bda1338fcca6a04",
                            PhotoFile = "",
                            CompanyId = 1,
                            Department = "IT",
                            PhoneNumber = "1234567890",
                            TurkishIdentificationNumber = "12345678901"
                        });
                });

            modelBuilder.Entity("HR.Data.Entities.Concrete.Advance", b =>
                {
                    b.HasOne("HR.Data.Entities.Concrete.AdvanceType", "AdvanceType")
                        .WithMany("Advances")
                        .HasForeignKey("AdvanceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HR.Data.Entities.Concrete.Employee", "CreatorEmployee")
                        .WithMany("Advances")
                        .HasForeignKey("CreatorEmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HR.Data.Entities.Concrete.Manager", "ReviewerManager")
                        .WithMany("ReviewedAdvances")
                        .HasForeignKey("ReviewerManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AdvanceType");

                    b.Navigation("CreatorEmployee");

                    b.Navigation("ReviewerManager");
                });

            modelBuilder.Entity("HR.Data.Entities.Concrete.Company", b =>
                {
                    b.HasOne("HR.Data.Entities.Concrete.CompanyType", "CompanyType")
                        .WithMany("Companies")
                        .HasForeignKey("CompanyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyType");
                });

            modelBuilder.Entity("HR.Data.Entities.Concrete.Expense", b =>
                {
                    b.HasOne("HR.Data.Entities.Concrete.Employee", "CreatorEmployee")
                        .WithMany("Expenses")
                        .HasForeignKey("CreatorEmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HR.Data.Entities.Concrete.ExpenseType", "ExpenseType")
                        .WithMany("Expenses")
                        .HasForeignKey("ExpenseTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HR.Data.Entities.Concrete.Manager", "ReviewerManager")
                        .WithMany("ReviewedExpenses")
                        .HasForeignKey("ReviewerManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatorEmployee");

                    b.Navigation("ExpenseType");

                    b.Navigation("ReviewerManager");
                });

            modelBuilder.Entity("HR.Data.Entities.Concrete.Leave", b =>
                {
                    b.HasOne("HR.Data.Entities.Concrete.Employee", "CreatorEmployee")
                        .WithMany("Leaves")
                        .HasForeignKey("CreatorEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HR.Data.Entities.Concrete.LeaveType", "LeaveType")
                        .WithMany("Leaves")
                        .HasForeignKey("LeaveTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HR.Data.Entities.Concrete.Manager", "ReviewerManager")
                        .WithMany("ReviewedLeaves")
                        .HasForeignKey("ReviewerManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatorEmployee");

                    b.Navigation("LeaveType");

                    b.Navigation("ReviewerManager");
                });

            modelBuilder.Entity("HR.Data.Entities.Abstract.ServiceUser", b =>
                {
                    b.HasOne("HR.Data.Entities.Concrete.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("HR.Data.Entities.Concrete.CompanyAddress", b =>
                {
                    b.HasOne("HR.Data.Entities.Concrete.Company", "Company")
                        .WithOne("Address")
                        .HasForeignKey("HR.Data.Entities.Concrete.CompanyAddress", "CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("HR.Data.Entities.Concrete.ServiceUserAddress", b =>
                {
                    b.HasOne("HR.Data.Entities.Abstract.ServiceUser", "ServiceUser")
                        .WithMany("Addresses")
                        .HasForeignKey("ServiceUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceUser");
                });

            modelBuilder.Entity("HR.Data.Entities.Concrete.AdvanceType", b =>
                {
                    b.Navigation("Advances");
                });

            modelBuilder.Entity("HR.Data.Entities.Concrete.Company", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("HR.Data.Entities.Concrete.CompanyType", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("HR.Data.Entities.Concrete.ExpenseType", b =>
                {
                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("HR.Data.Entities.Concrete.LeaveType", b =>
                {
                    b.Navigation("Leaves");
                });

            modelBuilder.Entity("HR.Data.Entities.Abstract.ServiceUser", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("HR.Data.Entities.Concrete.Employee", b =>
                {
                    b.Navigation("Advances");

                    b.Navigation("Expenses");

                    b.Navigation("Leaves");
                });

            modelBuilder.Entity("HR.Data.Entities.Concrete.Manager", b =>
                {
                    b.Navigation("ReviewedAdvances");

                    b.Navigation("ReviewedExpenses");

                    b.Navigation("ReviewedLeaves");
                });
#pragma warning restore 612, 618
        }
    }
}
